<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="java-statements" deleted="false" description="iterate over map EntrySet" enabled="true" name="for">// iterate over Map&#13;
for(Map.Entry&lt;${key:argType(map,0)},${value:argType(map,1)}&gt; entry :&#13;
                    ${map:var(java.util.Map)}.entrySet()) {&#13;
    ${key} key = entry.getKey();&#13;
    ${value} value = entry.getValue();&#13;
    ${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterator over map" enabled="true" name="for">// iterate over Map&#13;
for(${value:argType(map,1)} element :&#13;
                    ${map:var(java.util.Map)}.values()) {&#13;
    ${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="if not null" enabled="true" name="if">if (${var} != null){&#13;
    ${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="if null" enabled="true" name="if">if (${var} == null){&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-statements" deleted="false" description="invoke lineselection later" enabled="true" name="invokelater">${:import(javax.swing.SwingUtilities)}&#13;
// Ensure that any Swing components will be invoked only from the AWT thread&#13;
SwingUtilities.invokeLater(new Runnable() {&#13;
&#13;
    @Override&#13;
    public void run() {&#13;
        ${line_selection}${cursor}&#13;
    }&#13;
&#13;
});</template><template autoinsert="false" context="java" deleted="false" description="Create and import a slf4J Logger" enabled="true" name="Logger_create">${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}&#13;
/**&#13;
 * the Logger for this Class&#13;
 */&#13;
private static final Logger LOG = LoggerFactory.getLogger(${enclosing_type}.class);</template><template autoinsert="false" context="java-statements" deleted="false" description="read all lines from file as a list" enabled="true" name="readfile"> ${:import(java.io.BufferedReader,  &#13;
           java.io.FileNotFoundException,  &#13;
           java.io.FileReader, &#13;
		   java.util.List,&#13;
           java.util.ArrayList,&#13;
           java.io.IOException)}  &#13;
 // Read file into list of lines&#13;
 BufferedReader in = null;  &#13;
 List&lt;String&gt; lines = new ArrayList&lt;&gt;();&#13;
 try {  &#13;
    in = new BufferedReader(new FileReader(${fileName}));  &#13;
    String line;  &#13;
    while ((line = in.readLine()) != null) {  &#13;
       lines.add(line);  &#13;
    }  &#13;
    // ${todo}: do something with the lines&#13;
 }  &#13;
 catch (FileNotFoundException e) {  &#13;
    logger.error(e) ;  &#13;
 }  &#13;
 catch (IOException e) {  &#13;
    logger.error(e) ;  &#13;
 } finally {  &#13;
    if(in != null) in.close();  &#13;
 }  &#13;
 &#13;
${cursor} </template><template autoinsert="false" context="java-statements" deleted="false" description="read all lines from file as a list (Java7)" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.util.List,&#13;
          java.util.ArrayList)}&#13;
// Read all Lines in File&#13;
List&lt;String&gt; lines = new ArrayList&lt;&gt;();&#13;
try{&#13;
    lines = Files.readAllLines(Paths.get(${fileName:var(String)}),&#13;
                                        Charset.forName("UTF-8"));&#13;
}catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
${cursor}</template></templates>